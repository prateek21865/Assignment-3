import { Request, Response } from 'express';
import { Customer } from '../models/customer';
import db from '../db';

// Create a new customer
export const createCustomer = async (req: Request, res: Response) => {
    const newCustomer: Customer = {
        id: 0,  // This will be generated by the database
        name: req.body.name,
        website: req.body.website,
        address: req.body.address,
        created_on: new Date(),  // Set to current date
        modified_on: new Date()   // Set to current date
    };

    const result = await db.query(
        'INSERT INTO customers (name, website, address, created_on, modified_on) VALUES ($1, $2, $3, $4, $5) RETURNING *',
        [newCustomer.name, newCustomer.website, newCustomer.address, newCustomer.created_on, newCustomer.modified_on]
    );
    
    res.status(201).json(result.rows[0]);
};

// Get all customers
export const getAllCustomers = async (req: Request, res: Response) => {
    const result = await db.query('SELECT * FROM customers');
    res.json(result.rows);
};

// Get a specific customer by ID
export const getCustomerById = async (req: Request, res: Response) => {
    const { id } = req.params;
    const result = await db.query('SELECT * FROM customers WHERE id = $1', [id]);

    if (result.rows.length === 0) {
        return res.status(404).json({ message: 'Customer not found' });
    }

    res.json(result.rows[0]);
};

// Update an existing customer
export const updateCustomer = async (req: Request, res: Response) => {
    const { id } = req.params;
    const updatedCustomer: Partial<Customer> = {
        name: req.body.name,
        website: req.body.website,
        address: req.body.address,
        modified_on: new Date() // Update modified_on timestamp
    };

    const result = await db.query(
        'UPDATE customers SET name = $1, website = $2, address = $3, modified_on = $4 WHERE id = $5 RETURNING *',
        [updatedCustomer.name, updatedCustomer.website, updatedCustomer.address, updatedCustomer.modified_on, id]
    );

    if (result.rows.length === 0) {
        return res.status(404).json({ message: 'Customer not found' });
    }

    res.json(result.rows[0]);
};

// Delete a customer
export const deleteCustomer = async (req: Request, res: Response) => {
    const { id } = req.params;
    const result = await db.query('DELETE FROM customers WHERE id = $1 RETURNING *', [id]);

    if (result.rows.length === 0) {
        return res.status(404).json({ message: 'Customer not found' });
    }

    res.json({ message: 'Customer deleted successfully', deletedCustomer: result.rows[0] });
};
